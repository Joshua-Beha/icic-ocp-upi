###############################################################################
# Â© Copyright IBM Corporation 2020, 2021, 2022
###############################################################################

###############################################################################
# This sample playbook demonstrates how to submit jobs, query and retrieve job
# output using modules included in the Red Hat Ansible Certified  Content for
# IBM Z core collection.
#
# Usage:
#  ansible-playbook -i <inventory> <playbook>
#
# Example:
#  ansible-playbook -i inventories submit_query_retrieve.yaml
#
#  Additional facts for this playbook can be configured to override the defaults
#  by reviewing the "Fact setting" section of this playbook, for example,
#  `data_set_name`.
#
# Requirements:
#   IBM z/OS core collection 1.1.0 or later # FIXME - update to correct version.
#
# Configure:
#   tgt_tmp_dir - this is the USS directory on the target which will be written
#                 to for this example.
# Optional:
#   data_set_name - this is the data set name that will be created during
#                   execution of this sample.
#   job_name - this is the job name what will be used in this sample, if you
#              change the HELLO.JCL job name, you must update this variable
###############################################################################

---
- hosts: zos_host
  collections:
    - ibm.ibm_zos_core
  gather_facts: no
  vars:
    tgt_tmp_dir: "/tmp"
    job_name: "HELLO"
  environment: "{{ environment_vars }}"

  tasks:
    # ##########################################################################
    # Generate a temporary data set name
    # ##########################################################################
    - name: Create temp data set name
      command: "mvstmp {{ ansible_user | upper }}"
      register: tmp_ds

    # ##########################################################################
    # Fact setting for use by this playbook
    # ##########################################################################
    - name: Setting fact `data_set_name` for use by this sample
      set_fact:
        data_set_name: "{{ tmp_ds.stdout }}"

    - name: Fact `data_set_name` set with value
      debug:
        msg: "{{ data_set_name }}"

    ############################################################################
    # Modules zos_data_set, zos_tso_command, zos_job_submit, zos_job_query,
    # zos_job_output
    ############################################################################
    # +-------------------------------------------------------------------------
    # | Create a data set and member, create JCL on USS target, copy USS JCL to
    # | data set, rename data set using TSO commands, submit JCL in data set,
    # | query job, get job output.
    # +-------------------------------------------------------------------------
    - name: Create a PDS data set {{ data_set_name }}
      zos_data_set:
        name: "{{ data_set_name }}"
        type: pds
        size: 5M
        format: fb
        record_length: 80
        replace: yes
      register: result

    - name: Response for create a PDS data set {{ data_set_name }}
      debug:
        msg: "{{ result }}"

    # +-------------------------------------------------------------------------
    # | "with_sequence" is a type of Ansible loop. The loop here only runs for a
    # | single iteration and is included solely to demonstrate how easy and
    # | straightforward it would be to perform the operation for multiple
    # | members. The end result of this block is a single member 'MEM1' is 
    # | created.
    # +-------------------------------------------------------------------------
    - name: Create a PDS member and replace if member exist
      zos_data_set:
        name: "{{ data_set_name }}(MEM{{ item }})"
        type: MEMBER
        replace: yes
      with_sequence: count=1
      register: result

    - name: Response for create a PDS member and replace if member exist
      debug:
        msg: "{{ result }}"

    - name: Ensure JCL folder exists in USS to manage JCL
      file:
        path: "{{ tgt_tmp_dir }}/ansible/jcl"
        state: directory

    - name: Write HELLO JCL to USS in {{ tgt_tmp_dir }}/ansible/jcl/HELLO"
        on target {{ inventory_hostname }}
      zos_copy:
        src: "{{ playbook_dir }}/files/HELLO.jcl"
        dest: "{{ tgt_tmp_dir }}/ansible/jcl/HELLO"
      # changed_when: true
      register: result

    - name: Response for write HELLO JCL to USS
        in {{ tgt_tmp_dir }}/ansible/jcl/HELLO" on
        target {{ inventory_hostname }}
      debug:
        msg: "{{ result }}"

    - name: Populate {{ data_set_name }} member with data from USS file
        in {{ tgt_tmp_dir }}/ansible/jcl
      zos_copy:
        src: "{{ tgt_tmp_dir }}/ansible/jcl/HELLO"
        remote_src: True
        dest: "{{ data_set_name }}(MEM1)"
      register: result

    - name: Response for populate {{ data_set_name }} member with data from
        USS file in {{ tgt_tmp_dir }}/ansible/jcl
      debug:
        msg: "{{ result }}"

    - name: TSO commands to manage data set (LU, LISTDS, RENAME, LISTDS)
      zos_tso_command:
        commands:
          - LU {{ ansible_user }}
          - LISTDS '{{ data_set_name }}'
          - RENAME '{{ data_set_name }}' '{{ data_set_name }}.LLQ'
          - LISTDS '{{ data_set_name }}.LLQ'
      register: result

    - name: Response for TSO commands to manage data
        set (LU, LISTDS, RENAME, LISTDS)
      debug:
        msg: "{{ result }}"

    - name: Submit the JCL {{ data_set_name }}.LLQ(MEM1)
      zos_job_submit:
        src: "{{ data_set_name }}.LLQ(MEM{{ item }})"
        location: DATA_SET
        wait: true
      register: response
      with_sequence: count=1

    - name: Response for submit the JCL {{ data_set_name }}.LLQ(MEM1)
      debug:
        msg: "{{ result }}"

    - name: Query submitted job 'HELLO' in data set {{ data_set_name }}.LLQ
      zos_job_query:
        job_name: HELLO
      register: result

    - name: Response for query submitted job 'HELLO' in data
        set {{ data_set_name }}.LLQ
      debug:
        msg: "{{ result }}"

    - name: Get HELLO job output
      zos_job_output:
        job_name: HELLO
      register: result

    - name: Response for get HELLO job output
      debug:
        msg: "{{ result }}"

    # +-------------------------------------------------------------------------
    # | Submit target JCL from USS, query for the submitted job and obtain the
    # | job output, cleanup USS files and data sets.
    # +-------------------------------------------------------------------------

    - name: Response for write sample {{job_name}} JCL in {{ tgt_tmp_dir }}/ansible/jcl
            on USS target
      debug:
        msg: "{{ result }}"

    - name: Submit {{job_name}} jcl located on target
            in {{ tgt_tmp_dir }}/ansible/jcl/{{job_name}}
      zos_job_submit:
        src: "{{ tgt_tmp_dir }}/ansible/jcl/{{job_name}}"
        location: USS
        wait: True

    - name: Response for submit {{job_name}} jcl located on target
            in {{ tgt_tmp_dir }}/ansible/jcl/{{job_name}}
      debug:
        msg: "{{ result }}"

    - name: Query the submitted job {{job_name}} on USS target
      zos_job_query:
        job_name: "{{job_name}}"
      register: result

    - name: Response for Query the submitted job {{job_name}}
            on USS target
      debug:
        msg: "{{ result }}"

    - name: Get {{job_name}} job output on USS target
      zos_job_output:
        job_name: "{{job_name}}"
      register: result

    - name: Response for Get {{job_name}} job output on USS target
      debug:
        msg: "{{ result }}"

    - name: Remove {{job_name}} JCL and folder on USS target
      file:
        path: "{{ tgt_tmp_dir }}/ansible"
        state: absent

    - name: Response for remove {{job_name}} JCL and folder on
            USS target
      debug:
        msg: "{{ result }}"

    - name: Delete data set {{ data_set_name }}
      zos_data_set:
        name: "{{ data_set_name }}.LLQ"
        state: absent
      register: result

    - name: Response for delete data set {{ data_set_name }}
      debug:
        msg: "{{ result }}"
